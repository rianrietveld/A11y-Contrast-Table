(()=>{"use strict";var t={919:(t,r,e)=>{e.p},138:(t,r,e)=>{function n(){let t=[],r=0,e=o($("#act-settings-background-colors")),n=o($("#act-settings-foreground-colors"));n.forEach((n=>{e.forEach((e=>{let o=function(t,r){let e=i(t),n=i(r),o=a(e),c=a(n);return function(t,r){let e,n,o;return t>=r?(n=t,o=r):(n=r,o=t),e=(n+.05)/(o+.05),Math.round(e,1)}(s(o),s(c))}(e[0],n[0]),c=function(t){return t<3?": Fail":t<4.5?": LB":": Pass"}(o);t.push([r,[e[0],n[0],o,c]])})),r++})),function(t,r,e){$("tr").remove(),$("caption").after('<tr class="header"></tr>');let n=$(".header");n.append("<td> </td>"),r.forEach((t=>{n.append('<th scope="col">'+t[0]+"<br />"+t[1]+"</th>")})),e.slice().reverse().forEach((t=>{n.after('<tr class="row"><th scope="row">'+t[0]+"<br />"+t[1]+"</th></tr>")})),$(".row").each((function(t){let r="row-"+t++;$(this).addClass(r)}));let o=0,c=".row-0",i=0,a="",s="";t.forEach((t=>{i=t[0],i!==o&&(o++,c=".row-"+o),s=t[1][1]!==t[1][0]?"<div>"+t[1][2]+t[1][3]+"</div>":"",a=' style="color:'+t[1][1]+"; background-color:"+t[1][0]+';"',$(c).append("<td"+a+"><span>Text</span>"+s+"</td>")}))}(t,e,n)}function o(t){let r=t.val().split(/\r?\n/),e=[];return r.forEach((t=>{let r=t.split(","),n=r[0];7===n.length&&"#"===n[0]&&(void 0===r[1]&&(r[1]=""),r[0]=r[0].toUpperCase(),e.push(r))})),e}e(919),$(document).ready((function(){n(),$("#show_table").on("click",n)})),Math.round=function(){let t=Math.round;return function(r,e){e=+e||0;let n=Math.pow(100,e);return t(r*n)/n}}();let c={toString:function(){return"<r: "+this.r+" g: "+this.g+" b: "+this.b+" >"}};function i(t){let r,e,n,o=Object.create(c);if("string"!=typeof t)throw new Error("must use string");return r=parseInt(t.slice(1,3),16),e=parseInt(t.slice(3,5),16),n=parseInt(t.slice(5,7),16),o.r=r,o.g=e,o.b=n,o}function a(t){let r,e=function(t){let r,e=Object.create(c);for(r in t)t.hasOwnProperty(r)&&(e[r]=parseFloat(t[r]/255,10));return e}(t),n=Object.create(c),o=0;for(r in e)e.hasOwnProperty(r)&&(o=parseFloat(e[r],10),n[r]=o<=.03928?o/12.92:Math.pow((o+.055)/1.055,2.4));return n}function s(t){return.2126*t.r+.7152*t.g+.0722*t.b}}},r={};function e(n){if(r[n])return r[n].exports;var o=r[n]={exports:{}};return t[n](o,o.exports,e),o.exports}e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var r=e.g.document;if(!t&&r&&(r.currentScript&&(t=r.currentScript.src),!t)){var n=r.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e(138),e(919)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,